"""
This type stub file was generated by pyright.
"""

# from __future__ import annotations
#
# import os
#
# from collections.abc import Callable, Generator, Sequence
# from re import Pattern
#
# from typing_extensions import Any, Literal, Optional
#
# """A spec-compliant `.gitignore` parser for Python."""
# DEFAULT_IGNORE_NAMES: list[str] = ...
# def parse(path: str, base_path=...) -> Callable[[str], bool]:
#     """Parses single `.gitignore` file.
#
#     Args:
#         path (str): Path to `.gitignore` file.
#         base_path (str): Base path for applying ignore rules.
#
#     Returns:
#         Callable[[str], bool]: Callable which returns `True` if specified path is ignored.
#             You can also pass `is_dir: bool` optional parameter if you know whether the specified path is a directory.
#     """
#     ...
#
# def ignore(ignore_names: list[str]=...) -> Callable[[str, list[str]], list[str]]:
#     """Returns `shutil.copytree()`-compatible ignore function for skipping ignored files.
#
#     It will check if file is ignored by any `.gitignore` in the directory tree.
#
#     Args:
#         ignore_names (list[str], optional): List of names of ignore files.
#
#     Returns:
#         Callable[[str, list[str]], list[str]]: Callable compatible with `shutil.copytree()`.
#     """
#     ...
#
# def ignored(path: str, is_dir: bool=..., ignore_names: list[str]=...) -> bool:
#     """Checks if file is ignored by any `.gitignore` in the directory tree.
#
#     Args:
#         path (str): Path to check against ignore rules.
#         is_dir (bool, optional): Set if you know whether the specified path is a directory.
#         ignore_names (list[str], optional): List of names of ignore files.
#
#     Returns:
#         bool: `True` if the path is ignored.
#     """
#     ...

class Cache:
    """Caches information about different `.gitignore` files in the directory tree.

    Allows to reduce number of queries to filesystem to mininum.
    """
    def __init__(self, ignore_names: list[str] | None =...) -> None:
        """Constructs `Cache` objects.

        Args:
            ignore_names (list[str], optional): List of names of ignore files.
        """
        ...

    def __call__(self, path: str, is_dir: bool | None =...) -> bool:
        """Checks whether the specified path is ignored.

        Args:
            path (str): Path to check against ignore rules.
            is_dir (bool, optional): Set if you know whether the specified path is a directory.
        """
        ...



# class _Path:
#     def __init__(self, path: str) -> None:
#         ...
#
#     @property
#     def parts(self) -> tuple[str | Any, ...] | Any:
#         ...
#
#     def join(self, name: str) -> _Path:
#         ...
#
#     def relpath(self, base_path: str) -> str | None:
#         ...
#
#     def parents(self) -> Generator[_Path, Any, None]:
#         ...
#
#     def isfile(self) -> bool:
#         ...
#
#     def isdir(self) -> bool:
#         ...
#
#     def __str__(self) -> str:
#         ...
#
#
#
# class _IgnoreRules:
#     def __init__(self, rules: Sequence[_IgnoreRule], base_path: str) -> None:
#         ...
#
#     def match(self, path: str, is_dir: bool =...) -> bool:
#         ...
#
#
#
# class _IgnoreRule:
#     def __init__(self, regexp: Pattern[str], negation: bool, directory_only: bool) -> None:
#         ...
#
#     @property
#     def regexp(self) -> Pattern[Any]:
#         ...
#
#     @property
#     def negation(self) -> bool:
#         ...
#
#     def match(self, rel_path: str, is_dir: bool) -> Literal[True] | None:
#         ...
#
#
#
# if os.altsep is not None:
#     _all_seps_expr = ...
#     _path_split = ...
# else:
#     _path_split = ...